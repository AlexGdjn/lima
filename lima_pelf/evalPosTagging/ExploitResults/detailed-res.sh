#!/bin/bash
## V.HANOKA, juillet 2010.
# Script permettant d'obtenir différentes informations sur
# les données produites lors de l'évaluation du/des tagger(s):
#
#     * Le graphique des scores en fonction des échantillons
#       pour chaque langue (data/ALL-RESULTS-GRAPH.png),
#
#     * Les données numériques correspondantes et leur sommaire
#       (data/ALL-RESULTS.txt),
#
#     * Le classement des erreurs par ordre de fréquence décroissant
#       pour chaque langue *L* indiquée (data/ALL-ERRORS-*L*.txt),
#
#     * Les matrices de confusion (data/ALL-MATRIX-*L*.png) et la correspondance
#       des indices des axes et des tags (data/ALL-MATRIX-*L*.corresp).
#     
#     * Une synthèse de ces informations dans un fichier pdf.

if (($#==0)); then 
    echo usage: detailed-res.sh nb-slices lang1 lang2 ... 
fi
date=$(date);

rm -f data/*

nbParts=$1
shift 1

if [ -z "$(which R 2>/dev/null)" ]
then
  echo "******* THIS SCRIPT NEEDS R (for des graphs) *********"
  echo "The package is named  \`r-base'."
  echo "Thanks to install it before running this script again."
  exit
fi

function readMethod() {
  dynsvmtool=`head -n 70 $LIMA_CONF/lima-lp-$1.xml | grep '"DynamicSvmToolPosTagger"/>'`
  svmtool=`head -n 70 $LIMA_CONF/lima-lp-$1.xml | grep '"SvmToolPosTagger"/>'`
  viterbi=`head -n 70 $LIMA_CONF/lima-lp-$1.xml | grep '"viterbiPostagger-freq"/>'`

  if [ -n "$svmtool" ]; then
    echo "svmtool"
  elif [ -n "$viterbi" ]; then
    echo "viterbi"
  elif [ -n "$dynsvmtool" ]; then
    echo "dynsvmtool"
  else
    echo "none"
  fi
}


###################
# Extract results #
###################

method=$(readMethod $1)

> data/ALL-RESULTS.txt;
for lang in $*; do
    echo -n -e "${lang}.${method}.micro\t${lang}.${method}.macro" >> data/ALL-RESULTS.txt;
done
echo  >> data/ALL-RESULTS.txt;
for sample in $(seq  1 $nbParts); do
    for lang in $*; do
      micro=$(../eval.pl ../results.$lang.$method/$sample/aligned | grep "precision" | grep -v "all"  | gawk -F "precision\t" '{print $2}' | sed -e 's/%.*//g');
      macro=$(../eval.pl ../results.$lang.$method/$sample/aligned.macro | grep "precision" | grep -v "all"  | gawk -F "precision\t" '{print $2}' | sed -e 's/%.*//g');

      echo -n -e "$micro\t$macro\t">> data/ALL-RESULTS.txt;
    done
    echo >> data/ALL-RESULTS.txt;
done

################
# Plot results #
################

plot=""; args="'$1.${method}.micro', '$1.${method}.macro'"; cols="'blue', 'red'"; cpt=2;
col=( "" "" "red" "green" "darkgray" "darkorange" "blue4" "black" "cyan4" "darkgreen");
while ((cpt <= $#))
do
plot="$plot;lines(data[['${!cpt}']], type='b', col='${col[$cpt]}')";
args="$args, '${!cpt}'"; cols="$cols, '${col[$cpt]}'"; 
((cpt+=1));
done
summary=$(R --vanilla --slave  <<< "data <- read.table('data/ALL-RESULTS.txt', header=T);png('data/ALL-RESULTS-GRAPH.png');plot(data[['$1.${method}.micro']], type='b', col='blue', ylim=c (0, 100), xlim=c(1, $nbParts), xlab='Sample', ylab='Precision', main='$date'); lines(data[['$1.${method}.macro']], type='b', col='red'); grid(nx=3, ny=50, lty='dotted', equilogs=FALSE)$plot;legend(1, 40, c($args), col=c($cols), pch=1, lty=3);summary(data);";)
echo -e "\n\n\n------------------------------\n\t\t\tSUMMARY\n-------------------------------\n\n$summary">> data/ALL-RESULTS.txt;

echo -e "\nFichiers produits:\n   *  Scores de l'évaluation ---> ALL-RESULTS.txt\n   *  Graph correspondant    ---> data/ALL-RESULTS-GRAPH.png";

#######################################
# Errors Ranking and Confusion Matrix #
#######################################

for lang in $*; do
  echo -n "   *  Classement des erreurs pour $lang";
  src/erreursFrequentes.pl $lang $method $nbParts; echo "";
  src/confusionMatrix.sh $lang $method $nbParts
done
echo "";

src/toPDF.sh synthese-$1-$method.pdf $*;

