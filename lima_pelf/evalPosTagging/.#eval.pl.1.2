#! /usr/bin/perl -s

$posTagger=$ARGV[0];
$fileFilter=$ARGV[1];

# debut de comparaison

opendir(LANGS,"references") || die ("impossible d ouvrir le repertoire references");
while ($lang = readdir(LANGS))
{

if (length($lang)!=3 || ($lang eq "CVS"))
{
    next;
}

$nbEntrees=0;
$nbEntreesNonAmbigues=0;
$nbEntreesNonAmbiguesCorrectes=0;


$nbEntreesAmbigues=0;
$nbEntreesAmbiguesCorrectes=0;
$nbCategoriesEntreesAmbigues=0;


$nbEntreesMalDecoupees=0;
$nbEntreesManquantes=0;

opendir(REFS,"references/$lang") || die ("impossible d ouvrir le repertoire references/$lang");
while ($file = readdir(REFS) )
{

if (!($file =~ /$fileFilter$/)) { next;}

open(REF,"references/$lang/$file") || die ("impossible d ouvrir le fichier references/$lang/$file");
open(EVAL,"$posTagger/$lang/$file") || die ("impossible d ouvrir le fichier $posTagger/$lang/$file");

&followRef;
&followEval;

while (($ligneRef ne "") && ($ligneEval ne ""))
{

    if (&RefEqEval) {

	    #print "equal\n";

	    if (scalar(@infosEval)==3) {
		    #entree non ambigue
			#print "entrée non ambigue\n";
		    $nbEntreesNonAmbigues++;
		    if ($infosEval[2] eq $infosRef[2])
		    {
			    #print "correcte\n";
		        $nbEntreesNonAmbiguesCorrectes++;
		    }
		} else {
		    #entree ambigue
			#$nbcat=scalar(@infosEval);
			#print "entrée ambigue ($nbcat)\n";
			$nbEntreesAmbigues++;
            $nbCategoriesEntreesAmbigues+=(scalar(@infosEval)-2);
			$found=0;
			for ($i=2;$i<scalar(@infosEval);$i++)
			{
			    if ($infosEval[$i] eq $infosRef[2])
				{
				    # categorie trouvee
					#print "found $infosEval[$i] equals $infosRef[2]\n";
                    $nbEntreesAmbiguesCorrectes++;
					$found=1;
					last;
				}
			}
			#if (!$found) {
			#    print "categorie '$infosRef[2]' non trouvée dans ligne :\n$ligneEval";
			#}
		}

        &followRef;
        &followEval;

	} else {

	    if (&RefLtEval) {
		    #print "ref < eval\n";
            &followRef;
            $nbEntreesManquantes++;
		} else {
		    #print "ref > eval\n";
            &followEval;
            $nbEntreesMalDecoupees++;
		}
	}

}
while ($ligneRef ne "") {
	&followRef;
    $nbEntreesManquantes++;
}
while ($ligneEval ne "") {
    &followEval;
	$nbEntreesMalDecoupees++;
}
$nbEntrees--;
# on oublie la dernière incrémentation

}

#print OUT "$nbEntrees entrées dans le fichier évalué\n";
#print OUT "$nbEntreesNonAmbigues entrées non ambigues\n";
#print OUT "$nbEntreesNonAmbiguesCorrectes entrée non ambigues correctes\n";
#print OUT "$nbEntreesAmbigues entrées ambigues\n";
#print OUT "$nbEntreesAmbiguesCorrectes entrées ambigues contenant la bonne categorie\n";
#print OUT "$nbCategoriesEntreesAmbigues categories dans les entrées ambigues\n";
#print OUT "\n";
#print OUT "$nbEntreesMalDecoupees entrées mal découpées (non attendues dans la référence)\n";
#print OUT "$nbEntreesManquantes entrées manquantes (attendues dans la référence mais non trouvées)\n";
#print OUT "\n";
#print OUT "$nbCategoriesAvantDesambiguisation categories avant désambiguisation\n";
print "$posTagger $lang $nbEntrees $nbEntreesNonAmbigues $nbEntreesNonAmbiguesCorrectes $nbEntreesAmbigues $nbEntreesAmbiguesCorrectes $nbCategoriesEntreesAmbigues $nbEntreesMalDecoupees $nbEntreesManquantes\n";

}

sub RefEqEval {
	return (($infosRef[0]==$infosEval[0]) && (length($infosRef[1])==length($infosEval[1])));
}

sub RefLtEval {
	if ($infosRef[0]<$infosEval[0]) { return 1; }
	if ($infosEval[0]<$infosRef[0]) { return 0; }
    return (length($infosRef[1])<length($infosEval[1]));
}

sub followRef {
    $ligneRef= <REF>;
	#print "read REF : $ligneRef";
    @infosRef = split(/\|/,$ligneRef);
   	for ($i=2;$i<scalar(@infosRef);$i++)
   	{
        chomp($infosRef[$i]);
   	    $infosRef[$i]=~ s/^\s*//;
   	    $infosRef[$i]=~ s/\s*$//;
    }
}

sub followEval {
    $ligneEval= <EVAL>;
	#print "read EVAL : $ligneEval";
    @infosEval = split(/\|/,$ligneEval);
    for ($i=2;$i<scalar(@infosEval);$i++)
	{
        chomp($infosEval[$i]);
    	$infosEval[$i]=~ s/^\s*//;
    	$infosEval[$i]=~ s/\s*$//;
	}
	$nbEntrees++;
}
