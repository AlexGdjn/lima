set encoding=utf8
using modex Location-modex.xml
using modex DateTime-modex.xml
using modex Person-modex.xml
using groups Location
set defaultAction=>CreateSpecificEntity()

#----------------------------------------------------------------------
# recognition of web adresses
#----------------------------------------------------------------------

@WebAddressesEndings=(com,org,net,fr,ch,co,uk,edu)

@fileExtension=(html,htm,jpg)

http::\: / / (* .){1-4} @WebAddressesEndings (/ ~? *){0-n} (/|/ * . @fileExtension)?:URL:

http::\: / / (* .){1-4} * (/ ~? *){0-n} (/|/ * . @fileExtension)?:URL:

www::. (* .){1-4} @WebAddressesEndings (/ ~? *){0-4} (/|/ * . @fileExtension)?:URL:

#town
Palm:West:Beach:LOCATION:West Palm Beach
+AddEntityFeature(left,right,"name")
=>NormalizeEntity()
=<ClearEntityFeatures()


Palm::Beach:LOCATION:Palm Beach
+AddEntityFeature(trigger,right,"name")
=>NormalizeEntity()
=<ClearEntityFeatures()

Wall::Street:NOT_LOCATION:
#----------------------------------------------------------------------
# recognition of location names
#----------------------------------------------------------------------

use cities.lst,states.lst,countriesAndRegions.lst
use greeklocations.lst
# contextual rules
use locationKey.lst,locationPre.lst,streetKey.lst,stateAbbrev.lst

# precise direction
# 12400 SW 152nd St.
# 3245 College Ave
# ( the T_Ni>1 trigger is a trick :
#   all T_Ni triggers must have less priority than T_Ni>1000<3000 triggers
#   (more specific) => must be placed after, or be a different trigger,
#   as specific )

@orientation=(N,S,E,W,NE,NW,SE,SW,N . E,N . W,S . E,S . W )

#12400 SW 152nd Avenue
T_Ni>1::(@orientation .?)? *{1-2} (@streetKey):LOCATION:
+AddEntityFeature(trigger,"adress-number")
+AddEntityFeature(right.1,"qualifier")
+AddEntityFeature(right.2,"name")
+AddEntityFeature(right.3,"kind")
=>NormalizeEntity()
=<ClearEntityFeatures()
#adress

T_Ni>1::(@StateAbbrev|US|U.S.) -? T_Ni<999:LOCATION:
#+AddEntityFeature(trigger,"adress-number") ???
#=>NormalizeEntity()
#=<ClearEntityFeatures()

## zip codes : five digits
## FL 33301
@StateAbbrev::T_Ni>9999<99999:LOCATION:
+AddEntityFeature(trigger,"name")
+AddEntityFeature(right,"zip-code")
=>NormalizeEntity()
=<ClearEntityFeatures()

## P.O. Box
Box:(PO|P.O.)?:T_Ni:LOCATION:
+AddEntityFeature(left,right,"po-box")
=<ClearEntityFeatures()
=>NormalizeEntity()


## BOX:(PO)
## Mile Markers
mile::marker (T_Ni|T_Nd):LOCATION:
+AddEntityFeature(trigger,right.1,"kind")
+AddEntityFeature(right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo ? => Jeremy said there's an access road just past mile marker 6.

## highway names

#Interstate 40
interstate::T_Ni<99:LOCATION:
+AddEntityFeature(trigger,"kind")
+AddEntityFeature(right,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#+AddEntityFeature(trigger,right,"name")
#=> loc odo ? 

I::- T_Ni<99:LOCATION:
+AddEntityFeature(trigger,right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo ? 

@StateAbbrev::-? T_Ni<999:LOCATION:
+AddEntityFeature(trigger,right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo ?

#@StateAbbrev:[,]:.?:LOCATION:

US::-? T_Ni<999:LOCATION:
+AddEntityFeature(trigger,right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo ?

U.S.::-? T_Ni<999:LOCATION:
+AddEntityFeature(trigger,right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo ?

## general contextual location rule

## $NP:@locationPre?:(@locationKey|@streetKey):LOCATION:
## @Capitalized=(t_capital_1st,T_Amh,$NP)
@Capitalized=(t_capital_1st,t_capital)

@Capitalized:@locationPre? (@Capitalized){0-2}:@locationKey:LOCATION:
+AddEntityFeature(trigger,"name")
+AddEntityFeature(left.2,trigger,"name")
+AddEntityFeature(right,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc phys ?

@Capitalized:@locationPre? (@Capitalized){0-2}:@streetKey:LOCATION:
+AddEntityFeature(trigger,"name")
+AddEntityFeature(left.2,trigger,"name")
+AddEntityFeature(right,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo

## @locationKey:@locationPre? @Capitalized{1-2}::LOCATION:
## @streetKey:@locationPre? @Capitalized{1-2}::LOCATION:

Park:@Capitalized{1-3}::LOCATION:
+AddEntityFeature(trigger,"kind")
+AddEntityFeature(left,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo

Church:@Capitalized{2-5}::LOCATION:
+AddEntityFeature(trigger,"kind")
+AddEntityFeature(left,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo

Place:@Capitalized?:@Capitalized?:LOCATION:
+AddEntityFeature(trigger,"kind")
+AddEntityFeature(left,"name")
+AddEntityFeature(right,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo

@locationKey:[@locationPre?] @Capitalized{1-3}::LOCATION:
+AddEntityFeature(left.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc ????


@Capitalized::[,] [@StateAbbrev]:LOCATION:
+AddEntityFeature(trigger,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc ????


Republic::of @Capitalized:LOCATION:
#=> loc loc.adm.nat

@locationPre::(@City|@State|@CountryOrRegion):LOCATION:
+AddEntityFeature(right,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

@CityInd=(
village,
city,
town,
district,
municipality,
capital,
prefect,
province,
port,
island,
settlement,
state,
streets,
suburb,
track,
diocese,
residents,
palace,
republic,
resort,
region
)
#warning (ald) : exclusion : well,north,east,south,west,in

@CityIndPlur=(
villages,
cities,
towns,
municipalities,
capitals,
prefects,
provinces,
ports,
republics,
islands,
settlements,
states,
streets,
suburbs,
dioceses,
district)

@Months=(
January,
February,
March,
April,
May,
June,
July,
August,
September,
November,
October,
December
)

#original regex : [@CityInd]::[of] t_capital_1st{1-3}:LOCATION:
@CityInd::of t_capital_1st{1-3}:LOCATION:
+AddEntityFeature(trigger,"kind")
+AddEntityFeature(right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#loc adm


[@CityIndPlur]::[of] t_capital_1st{1-3} [and] t_capital_1st{1-3}:LOCATION:
+AddEntityFeature(trigger,"kind")
+AddEntityFeature(right.2,right.4,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#loc adm - unable to define two names !

include ../Person/firstname.lst

[in]::@Months:NOT_LOCATION:
[in]::<DateTime.DATE>:NOT_LOCATION:

# 20120716, GC:
# hack to avoid references to people's work as location like in " in Yaffa Ganz' story ".
# Here, the possessive marker, which is not included in the token is used to avoid the
# location interpretation
[in]::(@Capitalized){1-3} ':NOT_LOCATION:

[in]::t_capital_1st{1-3}:LOCATION:

# a list of known locations
include location.rules

# to bypass errors in analysis
U.S::.:LOCATION:U.S.
+AddEntityFeature(trigger,right,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()


@nearKey=(
in,
by,
close\ to,
)

[near]::@Capitalized [@nearKey] @Capitalized:LOCATION:
+AddEntityFeature(right.1,right.3,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
# unable to define two names !! 

[near]::@Capitalized{1-3}:LOCATION:
+AddEntityFeature(right,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

# redundancies
# Arkansas state
# Exeter city
@State::(state|State):LOCATION:
+AddEntityFeature(trigger,"name")
+AddEntityFeature(right.1,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()


@State:(State|STATE) of::LOCATION:
+AddEntityFeature(trigger,"name")
+AddEntityFeature(left.1,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()

@City::city:LOCATION:
+AddEntityFeature(trigger,"name")
+AddEntityFeature(right.1,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()

@Greeklocations:::LOCATION:

# southern Afghanistan

@GeographicalPrecision=(
South,West,East,
Southern,Western,Northern,Eastern,
Southwest, Northwest, Southeast, Northeast,
Southwestern, Northwestern, Southeastern, Northeastern
)

Ruth::[and] Ruff:LOCATION:

#------------------------------
# telephone numbers are locations

T_Ni<999:\(:\) T_Ni<999 - T_Ni<9999:LOCATION:

T_Ni<999::- T_Ni<999 - T_Ni<9999:LOCATION:

1::- T_Ni<999 - T_Ni<999 - T_Ni<9999:LOCATION:

##------------------------------
## a list of known locations

use miscLocations.lst

@City:::LOCATION:

@State:::LOCATION:

@CountryOrRegion:::LOCATION:

@miscLocation:::LOCATION:

@locationVerbs=(
come,
came,
travel,
travelling,
traveling,
go,
went,
emigrate,
emigrates,
landed,
trip
)

[@locationVerbs]::[(to|in)] @Capitalized{1-3}:LOCATION:
+AddEntityFeature(right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

#Cap::(de @Capitalized|d\'):LOCATION:
Cap::(de|d\') @Capitalized:LOCATION:
+AddEntityFeature(right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
